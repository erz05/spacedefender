<html>

<head>
<title>SolarSystem</title>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">

<script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>
<script type="text/javascript" src="webgl-utils.js"></script>
<script src="http://www.html5canvastutorials.com/libraries/three.min.js"></script>

<script id="shader-fs" type="x-shader/x-fragment">
    precision mediump float;

    varying vec4 vColor;

    void main(void) {
        gl_FragColor = vColor;
    }
</script>

<script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPosition;
    attribute vec4 aVertexColor;

    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;

    varying vec4 vColor;

    void main(void) {
        gl_PointSize = 1.;
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);

        vColor = aVertexColor;
    }
</script>

<script type="text/javascript">

    var gl;
    var canvas;
    function initGL() {
        try {
            gl = canvas.getContext("experimental-webgl");
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }

    function resizeCanvas() {
        if (canvas.width != canvas.clientWidth || canvas.height != canvas.clientHeight) {

            canvas.width = canvas.clientWidth;
            canvas.height = canvas.clientHeight;
        }
    }

    function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }

        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }

        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }

        gl.shaderSource(shader, str);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }

        return shader;
    }


    var shaderProgram;

    function initShaders() {
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");

        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }

        gl.useProgram(shaderProgram);

        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

        shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
        gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);

        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
    }


    var mvMatrix = mat4.create();
    var mvMatrixStack = [];
    var pMatrix = mat4.create();

    function mvPushMatrix() {
        var copy = mat4.create();
        mat4.set(mvMatrix, copy);
        mvMatrixStack.push(copy);
    }

    function mvPopMatrix() {
        if (mvMatrixStack.length == 0) {
            throw "Invalid popMatrix!";
        }
        mvMatrix = mvMatrixStack.pop();
    }

    function setMatrixUniforms() {
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
    }

    function degToRad(degrees) {
        return degrees * Math.PI / 180;
    }

    var currentlyPressedKeys = {};

    function handleKeyDown(event) {
        currentlyPressedKeys[event.keyCode] = true;
    }


    function handleKeyUp(event) {
        currentlyPressedKeys[event.keyCode] = false;
    }

    var zoom = -25;
    var tilt = 90;
    var spin = 0;

    function handleKeys() {
        if (currentlyPressedKeys[38]) {
            // Up cursor key
            zoom += 0.1;
            if(zoom>25){
                zoom = 25;
            }
        }
        if (currentlyPressedKeys[40]) {
            // Down cursor key
            zoom -= 0.1;
            if(zoom<-25){
                zoom = -25;
            }
        }
    }

    var mouseDown = false;
    var lastMouseX = null;
    var lastMouseY = null;

    var moonRotationMatrix = mat4.create();
    mat4.identity(moonRotationMatrix);

    function handleMouseDown(event) {
        mouseDown = true;
        lastMouseX = event.clientX;
        lastMouseY = event.clientY;
    }


    function handleMouseUp(event) {
        mouseDown = false;
    }


    function handleMouseMove(event) {
        if (!mouseDown) {
            return;
        }
        var newX = event.clientX;
        var newY = event.clientY;

        var deltaX = newX - lastMouseX
        var newRotationMatrix = mat4.create();
        mat4.identity(newRotationMatrix);
        mat4.rotate(newRotationMatrix, degToRad(deltaX / 10), [0, 1, 0]);

        var deltaY = newY - lastMouseY;
        mat4.rotate(newRotationMatrix, degToRad(deltaY / 10), [1, 0, 0]);

        mat4.multiply(newRotationMatrix, moonRotationMatrix, moonRotationMatrix);

        lastMouseX = newX
        lastMouseY = newY;
    }

    var spaceCrafts = [];
    function handleDoubleClick(event) {

        var halfWidth = canvas.width/2;
        var halfHeight = canvas.height/2;
        var posx = event.clientX;
        posx = posx - halfWidth;

        var posy = event.clientY;
        posy = posy - halfHeight;

        console.log("posx = "+posx);
        console.log("zoom = "+zoom);

        spaceCrafts.push(initCraft(posx/30, -posy/30, 0));
    }

    function initCraft(posx, posy, posz) {        
         var vertices = [3.65653, -0.531689, -1.796485, 4.744736, -2.592917, -1.009194, 0.033922, -2.592917, -1.009194, 4.317716, -0.709062, 1.148756, -0.385091, -0.709061, 1.587847, 0.033922, -2.592917, 1.281284, 4.317716, -0.709062, 1.148756, 4.744735, -2.592918, 0.914115, 6.002987, -1.969784, 0.623638, 0.033922, -2.592917, 1.281284, -1.322849, -2.592917, 1.281284, -0.864468, -6.531676, -0.165358, 6.753231, -0.709062, 0.801377, 6.002987, -1.969784, 0.623638, 8.318893, -0.679342, 0.074107, 4.744735, -2.592918, 0.914115, 4.744736, -2.592917, -1.009194, 6.002987, -1.969784, 0.623638, 4.744736, -2.592917, -1.009194, 3.65653, -0.531689, -1.796485, 5.482797, -0.531689, -1.796485, 9.52279, -0.527978, -0.430835, 9.52279, -0.527978, 0.144201, 8.318893, -0.679342, 0.074107, 6.002987, -1.969784, 0.623638, 6.002987, -1.969784, -1.009194, 8.318893, -0.965702, -0.406739, 6.002987, -1.969784, -1.009194, 5.482797, -0.531689, -1.796485, 8.318893, -0.965702, -0.406739, -1.322849, -2.592917, 1.281284, -1.690618, -0.709061, 0.967087, -5.094834, -2.024818, 0.422707, -1.322849, -2.592917, -1.009194, 0.033922, -2.592917, -1.009194, -0.864468, -6.531677, -1.009194, 0.130138, -0.531688, -1.796485, 0.033922, -2.592917, -1.009194, -1.322849, -2.592917, -1.009194, -5.094834, 1.161015, 0.422707, -5.094834, 1.161015, -0.441095, -4.094834, 1.376966, -0.225144, -1.322849, -2.592917, -1.009194, -1.322849, -2.592917, 1.281284, -5.094834, -2.024818, 0.422707, -2.571166, -0.531688, -1.796485, -1.322849, -2.592917, -1.009194, -5.094834, -2.024818, -0.441095, 3.96641, -3.350469, -1.009194, 3.966409, -3.350469, -0.165358, -0.864468, -6.531676, -0.165358, -2.284986, -6.531677, -1.009194, -0.864468, -6.531677, -1.009194, -0.864468, -7.267043, -1.164313, -1.322849, -2.592917, 1.281284, -1.322849, -2.592917, -1.009194, -2.284986, -6.531676, -0.165358, 4.744735, -2.592918, 0.914115, 0.033922, -2.592917, 1.281284, 3.966409, -3.350469, -0.165358, 3.96641, -3.350469, -1.009194, 4.744736, -2.592917, -1.009194, 3.550154, -2.782305, -0.663301, 0.033922, -2.592917, -1.009194, 4.744736, -2.592917, -1.009194, 3.96641, -3.350469, -1.009194, 0.033922, -2.592917, 2.034945, -0.385091, -0.709061, 2.48914, -2.978461, -2.592917, 3.572248, -3.987556, 0.709061, 4.327579, -2.978461, 2.592916, 2.918565, -2.978461, -2.592917, 2.918565, 0.033922, -2.592917, 1.281284, -0.385091, -0.709061, 1.587847, 0.033922, -2.592917, 2.034945, -2.97846, -7.267043, -1.164313, -0.864468, -7.267043, -1.164313, -2.97846, -7.869648, -1.164313, -0.864468, -6.531676, -0.165358, -2.284986, -6.531676, -0.165358, -0.864468, -7.267042, -0.165358, -2.284986, -6.531676, -0.165358, -2.284986, -6.531677, -1.009194, -2.978461, -7.267042, -0.165358, -0.864468, -6.531677, -1.009194, -0.864468, -6.531676, -0.165358, -0.864468, -7.267042, -0.165358, 0.033922, -7.869648, -1.164313, 0.033922, -7.869648, -0.165358, -2.978461, -7.869648, -0.165358, 0.033922, 7.869647, -0.165358, -0.864468, 7.267041, -0.165358, -0.831729, 7.869647, -0.077762, -0.864468, -7.267042, -0.165358, 0.033922, -7.869648, -0.165358, 1.313196, -7.458611, -0.433612, 1.313196, -7.458611, -0.740939, 1.313196, -7.458611, -0.433612, 1.313196, -7.678081, -0.433612, 0.033922, -7.869648, -1.164313, -0.864468, -7.267043, -1.164313, 1.313196, -7.458611, -0.740939, 0.033922, -7.869648, -0.165358, 0.033922, -7.869648, -1.164313, 1.313196, -7.678081, -0.740939, -0.864468, -7.267043, -1.164313, -0.864468, -7.267042, -0.165358, 1.313196, -7.458611, -0.740939, -3.321908, -7.869648, -0.165358, -3.321908, -7.267042, -0.165358, -3.719613, -7.432854, -0.397545, -2.97846, -7.267043, -1.164313, -2.97846, -7.869648, -1.164313, -3.321907, -7.869648, -1.009194, -2.97846, -7.869648, -1.164313, -2.978461, -7.869648, -0.165358, -3.321907, -7.869648, -1.009194, -2.978461, -7.267042, -0.165358, -2.97846, -7.267043, -1.164313, -3.321907, -7.267043, -1.009194, -3.719613, -7.432854, -0.397545, -3.719613, -7.432854, -0.777006, -3.719613, -7.703837, -0.777006, -3.321907, -7.267043, -1.009194, -3.321907, -7.869648, -1.009194, -3.719613, -7.703837, -0.777006, -3.321907, -7.869648, -1.009194, -3.321908, -7.869648, -0.165358, -3.719613, -7.703837, -0.397545, -3.321908, -7.267042, -0.165358, -3.321907, -7.267043, -1.009194, -3.719613, -7.432854, -0.777006, 0.033922, -2.592917, 2.034945, -2.978461, -2.592917, 3.572248, -2.978461, -3.389871, 3.572248, 0.033922, -2.592917, 2.034945, 0.033922, -3.389871, 2.034945, 0.033922, -3.389871, 1.841806, -2.978461, -7.869648, -0.165358, -2.978461, -7.267042, -0.165358, -3.321908, -7.267042, -0.165358, -2.978461, -2.592917, 2.918565, 0.033922, -2.592917, 1.841806, 0.033922, -3.389871, 1.841806, 0.033922, -3.389871, 2.034945, -2.978461, -3.389871, 3.572248, -2.978461, -3.389871, 2.918565, -2.978461, -3.389871, 3.572248, -2.978461, -2.592917, 3.572248, -2.978461, -2.592917, 2.918565, -1.322849, -2.592917, 1.281284, 0.033922, -2.592917, 1.281284, -2.978461, -2.592917, 2.918565, 3.65653, 0.531688, -1.796485, 4.744736, 2.592917, -1.009194, 0.033922, 2.592917, -1.009194, 4.317717, 0.709061, 1.148756, -0.385091, 0.709061, 1.587847, 0.033922, 2.592916, 1.281284, 4.317717, 0.709061, 1.148756, 4.744736, 2.592917, 0.914115, 6.002987, 1.969784, 0.623638, 0.033922, 2.592916, 1.281284, -1.322849, 2.592916, 1.281284, -0.864468, 6.531676, -0.165358, 6.753231, 0.709061, 0.801377, 6.002987, 1.969784, 0.623638, 8.318893, 0.679342, 0.074107, 4.744736, 2.592917, 0.914115, 4.744736, 2.592917, -1.009194, 6.002987, 1.969784, 0.623638, 4.744736, 2.592917, -1.009194, 3.65653, 0.531688, -1.796485, 5.482798, 0.531688, -1.796485, 9.52279, 0.527977, -0.430835, 9.52279, 0.527977, 0.144201, 8.318893, 0.679342, 0.074107, 6.002987, 1.969784, 0.623638, 6.002988, 1.969784, -1.009194, 8.318893, 0.965701, -0.406739, 6.002988, 1.969784, -1.009194, 5.482798, 0.531688, -1.796485, 8.318893, 0.965701, -0.406739, -1.322849, 2.592916, 1.281284, -1.690618, 0.709061, 0.967087, -5.094834, 2.024817, 0.422707, -1.322849, 2.592917, -1.009194, 0.033922, 2.592917, -1.009194, -0.864468, 6.531676, -1.009194, 0.130138, 0.531688, -1.796485, 0.033922, 2.592917, -1.009194, -1.322849, 2.592917, -1.009194, -5.094834, 2.024817, 0.422707, -5.094834, 1.161015, 0.422707, -4.094834, 1.376966, 0.206757, -1.322849, 2.592917, -1.009194, -1.322849, 2.592916, 1.281284, -5.094834, 2.024817, 0.422707, -2.571166, 0.531688, -1.796485, -1.322849, 2.592917, -1.009194, -5.094834, 2.024817, -0.441095, 3.966409, 3.350469, -1.009194, 3.966409, 3.350469, -0.165358, -0.864468, 6.531676, -0.165358, -2.284986, 6.531676, -1.009194, -0.864468, 6.531676, -1.009194, -0.864468, 7.267041, -1.164313, -1.322849, 2.592916, 1.281284, -1.322849, 2.592917, -1.009194, -2.284986, 6.531676, -0.165358, 4.744736, 2.592917, 0.914115, 0.033922, 2.592916, 1.281284, 3.966409, 3.350469, -0.165358, 3.966409, 3.350469, -1.009194, 4.744736, 2.592917, -1.009194, 3.550154, 2.782305, -0.663301, 0.033922, 2.592917, -1.009194, 4.744736, 2.592917, -1.009194, 3.966409, 3.350469, -1.009194, 0.033922, 2.592916, 2.034945, -0.385091, 0.709061, 2.48914, -2.978461, 2.592916, 3.572248, -2.978461, 2.592916, 2.918565, -3.987556, 0.709061, 4.327579, -2.978461, 2.592916, 3.572248, 0.033922, 2.592916, 1.281284, -0.385091, 0.709061, 1.587847, 0.033922, 2.592916, 2.034945, -2.97846, 7.267041, -1.164313, -0.864468, 7.267041, -1.164313, -2.97846, 7.869647, -1.164313, -0.864468, 6.531676, -0.165358, -2.284986, 6.531676, -0.165358, -0.864468, 7.267041, -0.165358, -2.284986, 6.531676, -0.165358, -2.284986, 6.531676, -1.009194, -2.978461, 7.267041, -0.165358, -0.864468, 6.531676, -1.009194, -0.864468, 6.531676, -0.165358, -0.864468, 7.267041, -0.165358, 0.033922, 7.869647, -1.164313, 0.033922, 7.869647, -0.165358, -2.978461, 7.869647, -0.165358, -2.978461, 7.267041, -0.165358, -2.978461, 7.869647, -0.165358, -2.978461, 7.869647, 0.249133, -0.864468, 7.267041, -0.165358, 0.033922, 7.869647, -0.165358, 1.313196, 7.45861, -0.433612, 1.313196, 7.45861, -0.740939, 1.313196, 7.45861, -0.433612, 1.313196, 7.678081, -0.433612, 0.033922, 7.869647, -1.164313, -0.864468, 7.267041, -1.164313, 1.313196, 7.45861, -0.740939, 0.033922, 7.869647, -0.165358, 0.033922, 7.869647, -1.164313, 1.313196, 7.678081, -0.740939, -0.864468, 7.267041, -1.164313, -0.864468, 7.267041, -0.165358, 1.313196, 7.45861, -0.740939, -3.321908, 7.869647, -0.165358, -3.321908, 7.267041, -0.165358, -3.719613, 7.432853, -0.397545, -2.97846, 7.267041, -1.164313, -2.97846, 7.869647, -1.164313, -3.321907, 7.869647, -1.009194, -2.97846, 7.869647, -1.164313, -2.978461, 7.869647, -0.165358, -3.321907, 7.869647, -1.009194, -2.978461, 7.267041, -0.165358, -2.97846, 7.267041, -1.164313, -3.321907, 7.267041, -1.009194, -3.719613, 7.432853, -0.397545, -3.719613, 7.432853, -0.777006, -3.719613, 7.703835, -0.777006, -3.321907, 7.267041, -1.009194, -3.321907, 7.869647, -1.009194, -3.719613, 7.703835, -0.777006, -3.321907, 7.869647, -1.009194, -3.321908, 7.869647, -0.165358, -3.719613, 7.703835, -0.397545, -3.321908, 7.267041, -0.165358, -3.321907, 7.267041, -1.009194, -3.719613, 7.432853, -0.777006, 0.033922, 2.592916, 2.034945, -2.978461, 2.592916, 3.572248, -2.978461, 3.38987, 3.572248, 0.033922, 2.592916, 2.034945, 0.033922, 3.38987, 2.034945, 0.033922, 3.38987, 1.841806, -2.978461, 7.869647, -0.165358, -2.978461, 7.267041, -0.165358, -3.321908, 7.267041, -0.165358, -2.978461, 2.592916, 2.918565, 0.033922, 2.592916, 1.841806, 0.033922, 3.38987, 1.841806, 0.033922, 3.38987, 2.034945, -2.978461, 3.38987, 3.572248, -2.978461, 3.38987, 2.918565, -2.978461, 3.38987, 3.572248, -2.978461, 2.592916, 3.572248, -2.978461, 2.592916, 2.918565, -1.322849, 2.592916, 1.281284, 0.033922, 2.592916, 1.281284, -2.978461, 2.592916, 2.918565, 9.52279, -0.527978, 0.144201, 9.52279, -0.527978, -0.430835, 9.52279, 0.527977, -0.430835, 6.753231, -0.709062, 0.801377, 9.52279, -0.527978, 0.144201, 9.52279, 0.527977, 0.144201, 4.317716, -0.709062, 1.148756, 6.753231, -0.709062, 0.801377, 6.753231, 0.709061, 0.801377, -0.385091, -0.709061, 1.587847, 4.317716, -0.709062, 1.148756, 4.317717, 0.709061, 1.148756, -0.385091, -0.709061, 1.587847, -0.385091, 0.709061, 1.587847, -0.385091, 0.709061, 2.48914, -3.987556, -0.709061, 4.327579, -0.385091, -0.709061, 2.48914, -0.385091, 0.709061, 2.48914, -3.987556, -0.709061, 4.327579, -2.978461, -2.592917, 2.918565, -2.978461, -2.592917, 3.572248, -2.571166, 0.531688, -1.796485, 0.130138, 0.531688, -1.796485, 0.130138, 0.531688, -2.252397, 5.482798, 0.531688, -1.796485, 5.482797, -0.531689, -1.796485, 5.482797, -0.531689, -2.252397, 5.482797, -0.531689, -1.796485, 5.482798, 0.531688, -1.796485, 9.52279, 0.527977, -0.430835, -2.571166, -0.531688, -1.796485, -2.571166, 0.531688, -1.796485, -2.571166, 0.531688, -2.252397, -1.690618, 0.709061, 0.967087, -2.571166, 0.531688, -1.796485, -2.571166, -0.531688, -1.796485, -5.094834, -1.161016, -0.441095, -5.094834, -1.161016, 0.422707, -2.571166, -0.531688, -1.796485, -5.094834, 1.161015, -0.441095, -5.094834, 1.161015, 0.422707, -2.571166, 0.531688, -1.796485, 0.130138, -0.531688, -2.252397, 0.130138, 0.531688, -2.252397, 3.65653, 0.531688, -2.252397, 3.65653, -0.531689, -2.252397, 3.65653, 0.531688, -2.252397, 5.482798, 0.531688, -2.252397, -2.571166, -0.531688, -2.252397, -2.571166, 0.531688, -2.252397, 0.130138, 0.531688, -2.252397, 3.65653, 0.531688, -1.796485, 5.482798, 0.531688, -1.796485, 5.482798, 0.531688, -2.252397, 0.130138, 0.531688, -1.796485, 3.65653, 0.531688, -1.796485, 3.65653, 0.531688, -2.252397, 0.130138, -0.531688, -1.796485, -2.571166, -0.531688, -1.796485, -2.571166, -0.531688, -2.252397, 5.482797, -0.531689, -1.796485, 3.65653, -0.531689, -1.796485, 3.65653, -0.531689, -2.252397, 3.65653, -0.531689, -1.796485, 0.130138, -0.531688, -1.796485, 0.130138, -0.531688, -2.252397, 3.550154, -2.782305, -0.663301, 3.550154, -2.782306, 0.298354, 3.160991, -3.161081, -0.241383, 4.744735, -2.592918, 0.914115, 3.966409, -3.350469, -0.165358, 3.550154, -2.782306, 0.298354, 3.966409, -3.350469, -0.165358, 3.96641, -3.350469, -1.009194, 3.160991, -3.161081, -0.663301, 4.744736, -2.592917, -1.009194, 4.744735, -2.592918, 0.914115, 3.550154, -2.782306, 0.298354, 3.550154, 2.782305, -0.663301, 3.550154, 2.782305, 0.298354, 3.160991, 3.161081, -0.241383, 4.744736, 2.592917, 0.914115, 3.966409, 3.350469, -0.165358, 3.550154, 2.782305, 0.298354, 3.966409, 3.350469, -0.165358, 3.966409, 3.350469, -1.009194, 3.160991, 3.161081, -0.663301, 4.744736, 2.592917, -1.009194, 4.744736, 2.592917, 0.914115, 3.550154, 2.782305, 0.298354, -1.730119, -7.267042, -0.077762, -2.978461, -7.267042, 0.249133, -2.978461, -7.869648, 0.249133, -1.730119, 7.267041, -0.077762, -2.978461, 7.267041, 0.249133, -2.978461, 7.869647, 0.249133, -2.978461, 7.869647, -0.165358, 0.033922, 7.869647, -0.165358, -0.831729, 7.869647, -0.077762, -0.864468, 7.267041, -0.165358, -2.978461, 7.267041, -0.165358, -1.730119, 7.267041, -0.077762, -2.978461, -7.267042, -0.165358, -2.978461, -7.869648, -0.165358, -2.978461, -7.869648, 0.249133, 0.033922, -7.869648, -0.165358, -0.864468, -7.267042, -0.165358, -0.831729, -7.869648, -0.077762, -2.978461, -7.869648, -0.165358, 0.033922, -7.869648, -0.165358, -0.831729, -7.869648, -0.077762, -0.864468, -7.267042, -0.165358, -2.978461, -7.267042, -0.165358, -1.730119, -7.267042, -0.077762, -1.690618, 0.709061, 0.967087, -1.322849, 2.592916, 1.281284, -2.978461, 2.592916, 2.918565, -1.690618, -0.709061, 0.967087, -1.322849, -2.592917, 1.281284, -2.978461, -2.592917, 2.918565, -2.978461, 2.592916, 2.918565, -2.978461, -2.592917, 2.918565, -1.690618, -0.709061, 0.967087, -4.094834, -1.808867, -0.225144, -4.094834, -1.808867, 0.206757, -4.094834, -1.376966, 0.206757, -4.094834, 1.808867, -0.225144, -4.094834, 1.808867, 0.206757, -4.094834, 1.376966, 0.206757, -5.094834, 2.024817, -0.441095, -5.094834, 2.024817, 0.422707, -4.094834, 1.808867, 0.206757, -5.094834, 1.161015, -0.441095, -5.094834, 2.024817, -0.441095, -4.094834, 1.808867, -0.225144, -5.094834, -2.024818, 0.422707, -5.094834, -1.161016, 0.422707, -4.094834, -1.376966, 0.206757, -5.094834, -1.161016, 0.422707, -5.094834, -1.161016, -0.441095, -4.094834, -1.376966, -0.225144, -5.094834, -2.024818, -0.441095, -5.094834, -2.024818, 0.422707, -4.094834, -1.808867, 0.206757, -5.094834, -1.161016, -0.441095, -5.094834, -2.024818, -0.441095, -4.094834, -1.808867, -0.225144, 0.130138, -0.531688, -1.796485, 3.65653, -0.531689, -1.796485, 0.033922, -2.592917, -1.009194, 4.744735, -2.592918, 0.914115, 4.317716, -0.709062, 1.148756, 0.033922, -2.592917, 1.281284, 6.753231, -0.709062, 0.801377, 4.317716, -0.709062, 1.148756, 6.002987, -1.969784, 0.623638, -1.322849, -2.592917, 1.281284, -2.284986, -6.531676, -0.165358, -0.864468, -6.531676, -0.165358, 9.52279, -0.527978, 0.144201, 6.753231, -0.709062, 0.801377, 8.318893, -0.679342, 0.074107, 4.744736, -2.592917, -1.009194, 6.002987, -1.969784, -1.009194, 6.002987, -1.969784, 0.623638, 6.002987, -1.969784, -1.009194, 4.744736, -2.592917, -1.009194, 5.482797, -0.531689, -1.796485, 8.318893, -0.965702, -0.406739, 9.52279, -0.527978, -0.430835, 8.318893, -0.679342, 0.074107, 8.318893, -0.679342, 0.074107, 6.002987, -1.969784, 0.623638, 8.318893, -0.965702, -0.406739, 5.482797, -0.531689, -1.796485, 9.52279, -0.527978, -0.430835, 8.318893, -0.965702, -0.406739, -1.690618, -0.709061, 0.967087, -5.094834, -1.161016, 0.422707, -5.094834, -2.024818, 0.422707, -2.284986, -6.531677, -1.009194, -1.322849, -2.592917, -1.009194, -0.864468, -6.531677, -1.009194, -2.571166, -0.531688, -1.796485, 0.130138, -0.531688, -1.796485, -1.322849, -2.592917, -1.009194, -4.094834, 1.376966, 0.206757, -5.094834, 1.161015, 0.422707, -4.094834, 1.376966, -0.225144, -5.094834, -2.024818, -0.441095, -1.322849, -2.592917, -1.009194, -5.094834, -2.024818, 0.422707, -5.094834, -1.161016, -0.441095, -2.571166, -0.531688, -1.796485, -5.094834, -2.024818, -0.441095, -0.864468, -6.531677, -1.009194, 3.96641, -3.350469, -1.009194, -0.864468, -6.531676, -0.165358, -2.97846, -7.267043, -1.164313, -2.284986, -6.531677, -1.009194, -0.864468, -7.267043, -1.164313, -1.322849, -2.592917, -1.009194, -2.284986, -6.531677, -1.009194, -2.284986, -6.531676, -0.165358, 0.033922, -2.592917, 1.281284, -0.864468, -6.531676, -0.165358, 3.966409, -3.350469, -0.165358, 3.160991, -3.161081, -0.663301, 3.96641, -3.350469, -1.009194, 3.550154, -2.782305, -0.663301, -0.864468, -6.531677, -1.009194, 0.033922, -2.592917, -1.009194, 3.96641, -3.350469, -1.009194, -0.385091, -0.709061, 2.48914, -3.987556, -0.709061, 4.327579, -2.978461, -2.592917, 3.572248, -3.987556, -0.709061, 4.327579, -3.987556, 0.709061, 4.327579, -2.978461, -2.592917, 2.918565, -0.385091, -0.709061, 1.587847, -0.385091, -0.709061, 2.48914, 0.033922, -2.592917, 2.034945, -0.864468, -7.267043, -1.164313, 0.033922, -7.869648, -1.164313, -2.97846, -7.869648, -1.164313, -2.284986, -6.531676, -0.165358, -2.978461, -7.267042, -0.165358, -0.864468, -7.267042, -0.165358, -2.284986, -6.531677, -1.009194, -2.97846, -7.267043, -1.164313, -2.978461, -7.267042, -0.165358, -0.864468, -7.267043, -1.164313, -0.864468, -6.531677, -1.009194, -0.864468, -7.267042, -0.165358, -2.97846, -7.869648, -1.164313, 0.033922, -7.869648, -1.164313, -2.978461, -7.869648, -0.165358, -0.864468, 7.267041, -0.165358, -1.730119, 7.267041, -0.077762, -0.831729, 7.869647, -0.077762, 0.033922, -7.869648, -0.165358, 1.313196, -7.678081, -0.433612, 1.313196, -7.458611, -0.433612, 1.313196, -7.678081, -0.740939, 1.313196, -7.458611, -0.740939, 1.313196, -7.678081, -0.433612, 1.313196, -7.678081, -0.740939, 0.033922, -7.869648, -1.164313, 1.313196, -7.458611, -0.740939, 1.313196, -7.678081, -0.433612, 0.033922, -7.869648, -0.165358, 1.313196, -7.678081, -0.740939, -0.864468, -7.267042, -0.165358, 1.313196, -7.458611, -0.433612, 1.313196, -7.458611, -0.740939, -3.719613, -7.703837, -0.397545, -3.321908, -7.869648, -0.165358, -3.719613, -7.432854, -0.397545, -3.321907, -7.267043, -1.009194, -2.97846, -7.267043, -1.164313, -3.321907, -7.869648, -1.009194, -2.978461, -7.869648, -0.165358, -3.321908, -7.869648, -0.165358, -3.321907, -7.869648, -1.009194, -3.321908, -7.267042, -0.165358, -2.978461, -7.267042, -0.165358, -3.321907, -7.267043, -1.009194, -3.719613, -7.703837, -0.397545, -3.719613, -7.432854, -0.397545, -3.719613, -7.703837, -0.777006, -3.719613, -7.432854, -0.777006, -3.321907, -7.267043, -1.009194, -3.719613, -7.703837, -0.777006, -3.719613, -7.703837, -0.777006, -3.321907, -7.869648, -1.009194, -3.719613, -7.703837, -0.397545, -3.719613, -7.432854, -0.397545, -3.321908, -7.267042, -0.165358, -3.719613, -7.432854, -0.777006, 0.033922, -3.389871, 2.034945, 0.033922, -2.592917, 2.034945, -2.978461, -3.389871, 3.572248, 0.033922, -2.592917, 1.841806, 0.033922, -2.592917, 2.034945, 0.033922, -3.389871, 1.841806, -3.321908, -7.869648, -0.165358, -2.978461, -7.869648, -0.165358, -3.321908, -7.267042, -0.165358, -2.978461, -3.389871, 2.918565, -2.978461, -2.592917, 2.918565, 0.033922, -3.389871, 1.841806, 0.033922, -3.389871, 1.841806, 0.033922, -3.389871, 2.034945, -2.978461, -3.389871, 2.918565, -2.978461, -3.389871, 2.918565, -2.978461, -3.389871, 3.572248, -2.978461, -2.592917, 2.918565, 0.033922, -2.592917, 1.281284, 0.033922, -2.592917, 1.841806, -2.978461, -2.592917, 2.918565, 0.130138, 0.531688, -1.796485, 3.65653, 0.531688, -1.796485, 0.033922, 2.592917, -1.009194, 4.744736, 2.592917, 0.914115, 4.317717, 0.709061, 1.148756, 0.033922, 2.592916, 1.281284, 6.753231, 0.709061, 0.801377, 4.317717, 0.709061, 1.148756, 6.002987, 1.969784, 0.623638, -1.322849, 2.592916, 1.281284, -2.284986, 6.531676, -0.165358, -0.864468, 6.531676, -0.165358, 9.52279, 0.527977, 0.144201, 6.753231, 0.709061, 0.801377, 8.318893, 0.679342, 0.074107, 4.744736, 2.592917, -1.009194, 6.002988, 1.969784, -1.009194, 6.002987, 1.969784, 0.623638, 6.002988, 1.969784, -1.009194, 4.744736, 2.592917, -1.009194, 5.482798, 0.531688, -1.796485, 8.318893, 0.965701, -0.406739, 9.52279, 0.527977, -0.430835, 8.318893, 0.679342, 0.074107, 8.318893, 0.679342, 0.074107, 6.002987, 1.969784, 0.623638, 8.318893, 0.965701, -0.406739, 5.482798, 0.531688, -1.796485, 9.52279, 0.527977, -0.430835, 8.318893, 0.965701, -0.406739, -1.690618, 0.709061, 0.967087, -5.094834, 1.161015, 0.422707, -5.094834, 2.024817, 0.422707, -2.284986, 6.531676, -1.009194, -1.322849, 2.592917, -1.009194, -0.864468, 6.531676, -1.009194, -2.571166, 0.531688, -1.796485, 0.130138, 0.531688, -1.796485, -1.322849, 2.592917, -1.009194, -4.094834, 1.808867, 0.206757, -5.094834, 2.024817, 0.422707, -4.094834, 1.376966, 0.206757, -5.094834, 2.024817, -0.441095, -1.322849, 2.592917, -1.009194, -5.094834, 2.024817, 0.422707, -5.094834, 1.161015, -0.441095, -2.571166, 0.531688, -1.796485, -5.094834, 2.024817, -0.441095, -0.864468, 6.531676, -1.009194, 3.966409, 3.350469, -1.009194, -0.864468, 6.531676, -0.165358, -2.97846, 7.267041, -1.164313, -2.284986, 6.531676, -1.009194, -0.864468, 7.267041, -1.164313, -1.322849, 2.592917, -1.009194, -2.284986, 6.531676, -1.009194, -2.284986, 6.531676, -0.165358, 0.033922, 2.592916, 1.281284, -0.864468, 6.531676, -0.165358, 3.966409, 3.350469, -0.165358, 3.160991, 3.161081, -0.663301, 3.966409, 3.350469, -1.009194, 3.550154, 2.782305, -0.663301, -0.864468, 6.531676, -1.009194, 0.033922, 2.592917, -1.009194, 3.966409, 3.350469, -1.009194, -0.385091, 0.709061, 2.48914, -3.987556, 0.709061, 4.327579, -2.978461, 2.592916, 3.572248, -0.385091, 0.709061, 1.587847, -0.385091, 0.709061, 2.48914, 0.033922, 2.592916, 2.034945, -0.864468, 7.267041, -1.164313, 0.033922, 7.869647, -1.164313, -2.97846, 7.869647, -1.164313, -2.284986, 6.531676, -0.165358, -2.978461, 7.267041, -0.165358, -0.864468, 7.267041, -0.165358, -2.284986, 6.531676, -1.009194, -2.97846, 7.267041, -1.164313, -2.978461, 7.267041, -0.165358, -0.864468, 7.267041, -1.164313, -0.864468, 6.531676, -1.009194, -0.864468, 7.267041, -0.165358, -2.97846, 7.869647, -1.164313, 0.033922, 7.869647, -1.164313, -2.978461, 7.869647, -0.165358, -2.978461, 7.267041, 0.249133, -2.978461, 7.267041, -0.165358, -2.978461, 7.869647, 0.249133, 0.033922, 7.869647, -0.165358, 1.313196, 7.678081, -0.433612, 1.313196, 7.45861, -0.433612, 1.313196, 7.678081, -0.740939, 1.313196, 7.45861, -0.740939, 1.313196, 7.678081, -0.433612, 1.313196, 7.678081, -0.740939, 0.033922, 7.869647, -1.164313, 1.313196, 7.45861, -0.740939, 1.313196, 7.678081, -0.433612, 0.033922, 7.869647, -0.165358, 1.313196, 7.678081, -0.740939, -0.864468, 7.267041, -0.165358, 1.313196, 7.45861, -0.433612, 1.313196, 7.45861, -0.740939, -3.719613, 7.703835, -0.397545, -3.321908, 7.869647, -0.165358, -3.719613, 7.432853, -0.397545, -3.321907, 7.267041, -1.009194, -2.97846, 7.267041, -1.164313, -3.321907, 7.869647, -1.009194, -2.978461, 7.869647, -0.165358, -3.321908, 7.869647, -0.165358, -3.321907, 7.869647, -1.009194, -3.321908, 7.267041, -0.165358, -2.978461, 7.267041, -0.165358, -3.321907, 7.267041, -1.009194, -3.719613, 7.703835, -0.397545, -3.719613, 7.432853, -0.397545, -3.719613, 7.703835, -0.777006, -3.719613, 7.432853, -0.777006, -3.321907, 7.267041, -1.009194, -3.719613, 7.703835, -0.777006, -3.719613, 7.703835, -0.777006, -3.321907, 7.869647, -1.009194, -3.719613, 7.703835, -0.397545, -3.719613, 7.432853, -0.397545, -3.321908, 7.267041, -0.165358, -3.719613, 7.432853, -0.777006, 0.033922, 3.38987, 2.034945, 0.033922, 2.592916, 2.034945, -2.978461, 3.38987, 3.572248, 0.033922, 2.592916, 1.841806, 0.033922, 2.592916, 2.034945, 0.033922, 3.38987, 1.841806, -3.321908, 7.869647, -0.165358, -2.978461, 7.869647, -0.165358, -3.321908, 7.267041, -0.165358, -2.978461, 3.38987, 2.918565, -2.978461, 2.592916, 2.918565, 0.033922, 3.38987, 1.841806, 0.033922, 3.38987, 1.841806, 0.033922, 3.38987, 2.034945, -2.978461, 3.38987, 2.918565, -2.978461, 3.38987, 2.918565, -2.978461, 3.38987, 3.572248, -2.978461, 2.592916, 2.918565, 0.033922, 2.592916, 1.281284, 0.033922, 2.592916, 1.841806, -2.978461, 2.592916, 2.918565, 9.52279, 0.527977, 0.144201, 9.52279, -0.527978, 0.144201, 9.52279, 0.527977, -0.430835, 6.753231, 0.709061, 0.801377, 6.753231, -0.709062, 0.801377, 9.52279, 0.527977, 0.144201, 4.317717, 0.709061, 1.148756, 4.317716, -0.709062, 1.148756, 6.753231, 0.709061, 0.801377, -0.385091, 0.709061, 1.587847, -0.385091, -0.709061, 1.587847, 4.317717, 0.709061, 1.148756, -0.385091, -0.709061, 2.48914, -0.385091, -0.709061, 1.587847, -0.385091, 0.709061, 2.48914, -3.987556, 0.709061, 4.327579, -3.987556, -0.709061, 4.327579, -0.385091, 0.709061, 2.48914, -2.571166, 0.531688, -2.252397, -2.571166, 0.531688, -1.796485, 0.130138, 0.531688, -2.252397, 5.482798, 0.531688, -2.252397, 5.482798, 0.531688, -1.796485, 5.482797, -0.531689, -2.252397, 9.52279, -0.527978, -0.430835, 5.482797, -0.531689, -1.796485, 9.52279, 0.527977, -0.430835, -2.571166, -0.531688, -2.252397, -2.571166, -0.531688, -1.796485, -2.571166, 0.531688, -2.252397, -1.690618, -0.709061, 0.967087, -1.690618, 0.709061, 0.967087, -2.571166, -0.531688, -1.796485, -5.094834, -1.161016, 0.422707, -1.690618, -0.709061, 0.967087, -2.571166, -0.531688, -1.796485, -5.094834, 1.161015, 0.422707, -1.690618, 0.709061, 0.967087, -2.571166, 0.531688, -1.796485, 3.65653, -0.531689, -2.252397, 0.130138, -0.531688, -2.252397, 3.65653, 0.531688, -2.252397, 5.482797, -0.531689, -2.252397, 3.65653, -0.531689, -2.252397, 5.482798, 0.531688, -2.252397, 0.130138, -0.531688, -2.252397, -2.571166, -0.531688, -2.252397, 0.130138, 0.531688, -2.252397, 3.65653, 0.531688, -2.252397, 3.65653, 0.531688, -1.796485, 5.482798, 0.531688, -2.252397, 0.130138, 0.531688, -2.252397, 0.130138, 0.531688, -1.796485, 3.65653, 0.531688, -2.252397, 0.130138, -0.531688, -2.252397, 0.130138, -0.531688, -1.796485, -2.571166, -0.531688, -2.252397, 5.482797, -0.531689, -2.252397, 5.482797, -0.531689, -1.796485, 3.65653, -0.531689, -2.252397, 3.65653, -0.531689, -2.252397, 3.65653, -0.531689, -1.796485, 0.130138, -0.531688, -2.252397, 3.160991, -3.161081, -0.663301, 3.550154, -2.782305, -0.663301, 3.160991, -3.161081, -0.241383, 3.966409, -3.350469, -0.165358, 3.160991, -3.161081, -0.241383, 3.550154, -2.782306, 0.298354, 3.160991, -3.161081, -0.241383, 3.966409, -3.350469, -0.165358, 3.160991, -3.161081, -0.663301, 3.550154, -2.782305, -0.663301, 4.744736, -2.592917, -1.009194, 3.550154, -2.782306, 0.298354, 3.160991, 3.161081, -0.663301, 3.550154, 2.782305, -0.663301, 3.160991, 3.161081, -0.241383, 3.966409, 3.350469, -0.165358, 3.160991, 3.161081, -0.241383, 3.550154, 2.782305, 0.298354, 3.160991, 3.161081, -0.241383, 3.966409, 3.350469, -0.165358, 3.160991, 3.161081, -0.663301, 3.550154, 2.782305, -0.663301, 4.744736, 2.592917, -1.009194, 3.550154, 2.782305, 0.298354, -0.831729, -7.869648, -0.077762, -1.730119, -7.267042, -0.077762, -2.978461, -7.869648, 0.249133, -0.831729, 7.869647, -0.077762, -1.730119, 7.267041, -0.077762, -2.978461, 7.869647, 0.249133, -2.978461, 7.869647, 0.249133, -2.978461, 7.869647, -0.165358, -0.831729, 7.869647, -0.077762, -2.978461, 7.267041, -0.165358, -2.978461, 7.267041, 0.249133, -1.730119, 7.267041, -0.077762, -2.978461, -7.267042, 0.249133, -2.978461, -7.267042, -0.165358, -2.978461, -7.869648, 0.249133, -0.864468, -7.267042, -0.165358, -1.730119, -7.267042, -0.077762, -0.831729, -7.869648, -0.077762, -2.978461, -7.869648, 0.249133, -2.978461, -7.869648, -0.165358, -0.831729, -7.869648, -0.077762, -2.978461, -7.267042, -0.165358, -2.978461, -7.267042, 0.249133, -1.730119, -7.267042, -0.077762, -1.690618, 0.709061, 0.967087, -2.978461, 2.592916, 2.918565, -1.690618, -0.709061, 0.967087, -4.094834, -1.376966, -0.225144, -4.094834, -1.808867, -0.225144, -4.094834, -1.376966, 0.206757, -4.094834, 1.376966, -0.225144, -4.094834, 1.808867, -0.225144, -4.094834, 1.376966, 0.206757, -4.094834, 1.808867, -0.225144, -5.094834, 2.024817, -0.441095, -4.094834, 1.808867, 0.206757, -4.094834, 1.376966, -0.225144, -5.094834, 1.161015, -0.441095, -4.094834, 1.808867, -0.225144, -4.094834, -1.808867, 0.206757, -5.094834, -2.024818, 0.422707, -4.094834, -1.376966, 0.206757, -4.094834, -1.376966, 0.206757, -5.094834, -1.161016, 0.422707, -4.094834, -1.376966, -0.225144, -4.094834, -1.808867, -0.225144, -5.094834, -2.024818, -0.441095, -4.094834, -1.808867, 0.206757, -4.094834, -1.376966, -0.225144, -5.094834, -1.161016, -0.441095, -4.094834, -1.808867, -0.225144];

    var faces = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893];

        var vertexPositionBuffer;
        var vertexIndexBuffer;
        var vertexColorBuffer;

        vertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        vertexPositionBuffer.itemSize = 3;
        vertexPositionBuffer.numItems = vertices.length / 3;

            var colors = [];
        vertexColorBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
        for(var i=0; i<vertices.length; i++){
            colors.push(.3);
            colors.push(.3);
            colors.push(.3);
            colors.push(1);
        }
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
        vertexColorBuffer.itemSize = 4;
        vertexColorBuffer.numItems = colors.length / 4;

        vertexIndexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(faces), gl.STATIC_DRAW);
        vertexIndexBuffer.itemSize = 1;
        vertexIndexBuffer.numItems = faces.length;

        return new craft(posx, posy, posz, vertexPositionBuffer, vertexIndexBuffer, vertexColorBuffer);
    }

    var planetSizes =[.5, .05, .1, .09, .08, .3, .2, .1, .1, .05];
    var radiuses =[1, 2, 3, 4, 5, 6, 7, 8, 9];
    var c1 = [1, .7, .3, 0, 1, 1, .5, 1, 0, 0];
    var c2 = [1, .2, .5, .7, 0, 0.64705882352, 0, 0, 0, 1];
    var c3 = [0, 0, .3, 1, 0, 0, .8, 1, 1, 1];

    function initSphere(i, sizes) {
        var vertexPositionBuffer;
        var vertexIndexBuffer;
        var vertexColorBuffer;
        
        var latitudeBands = 20;
        var longitudeBands = 20;
        var radius = sizes[i];

        var vertexPositionData = [];
        var colors = [];

        for (var latNumber=0; latNumber <= latitudeBands; latNumber++) {
            var theta = latNumber * Math.PI / latitudeBands;
            var sinTheta = Math.sin(theta);
            var cosTheta = Math.cos(theta);

            for (var longNumber=0; longNumber <= longitudeBands; longNumber++) {
                var phi = longNumber * 2 * Math.PI / longitudeBands;
                var sinPhi = Math.sin(phi);
                var cosPhi = Math.cos(phi);

                var x = cosPhi * sinTheta;
                var z = cosTheta;
                var y = sinPhi * sinTheta;
                var u = 1 - (longNumber / longitudeBands);
                var v = 1 - (latNumber / latitudeBands);

                vertexPositionData.push(radius * x);
                vertexPositionData.push(radius * y);
                vertexPositionData.push(radius * z);

                colors.push(c1[i]);
                colors.push(c2[i]);
                colors.push(c3[i]);
                colors.push(1);
            }
        }

        var indexData = [];
        for (var latNumber=0; latNumber < latitudeBands; latNumber++) {
            for (var longNumber=0; longNumber < longitudeBands; longNumber++) {
                var first = (latNumber * (longitudeBands + 1)) + longNumber;
                var second = first + longitudeBands + 1;
                indexData.push(first);
                indexData.push(second);
                indexData.push(first + 1);

                indexData.push(second);
                indexData.push(second + 1);
                indexData.push(first + 1);
            }
        }

        vertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);
        vertexPositionBuffer.itemSize = 3;
        vertexPositionBuffer.numItems = vertexPositionData.length / 3;

        vertexColorBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
        vertexColorBuffer.itemSize = 4;
        vertexColorBuffer.numItems = colors.length / 4;

        vertexIndexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STATIC_DRAW);
        vertexIndexBuffer.itemSize = 1;
        vertexIndexBuffer.numItems = indexData.length;

        return new sphere(vertexPositionBuffer, vertexIndexBuffer, vertexColorBuffer);
    }

    function initCircle(i) {
    	var radius = radiuses[i];
        var vertexPositionBuffer;
        var vertexColorBuffer;
        var positionData = [];
        var colors = [];
        var numSegments = 100;
        for(var i=0; i<numSegments; i++){
            var theta = 2.0 * 3.1415926 * i / numSegments;
            var x = radius * Math.cos(theta);
            var z = 0;
            var y = radius * Math.sin(theta);

            positionData.push(x);
            positionData.push(y);
            positionData.push(z);
            colors.push(.2);
            colors.push(.2);
            colors.push(.2);
            colors.push(1);
        }
        
        vertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positionData), gl.STATIC_DRAW);
        vertexPositionBuffer.itemSize = 3;
        vertexPositionBuffer.numItems = positionData.length/3;

        vertexColorBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
        vertexColorBuffer.itemSize = 4;
        vertexColorBuffer.numItems = colors.length / 4;

        return new circle(vertexPositionBuffer, vertexColorBuffer);
    }

    var starPositionBuffer;
    var starColorBuffer;
    function initStars() {
        starPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, starPositionBuffer);
        var vertices = [];
        var colors = [];
        for(var i=0; i<100; i++){
            vertices.push((Math.random()*60)-30);
            vertices.push((Math.random()*60)-30);
            vertices.push(-30);

            colors.push(Math.random());
            colors.push(Math.random());
            colors.push(Math.random());
            colors.push(Math.random());
        }
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        starPositionBuffer.itemSize = 3;
        starPositionBuffer.numItems = vertices.length/3;

        starColorBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, starColorBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
        starColorBuffer.itemSize = 4;
        starColorBuffer.numItems = colors.length / 4;
    }

    var orbits = [];
    var planets = [];
    var moons = [];
    function initBuffers() {
        for(var i=0; i<9; i++){
            orbits.push(initCircle(i));
        }

        for(var i=0; i<10; i++){
            planets.push(initSphere(i, planetSizes));
        }

        initStars();
    }

    function degToRad(degrees) {
        return degrees * Math.PI / 180;
    }

    var rAngle = 0;

    function drawCraft(i){
        var craft = spaceCrafts[i];
        mvPushMatrix();
        mat4.translate(mvMatrix, [craft.posx, craft.posy, 0.0]);
        mat4.scale(mvMatrix,[.05,.05,.05]);
        var vertexPositionBuffer = craft.vertexPositionBuffer;
        var vertexIndexBuffer = craft.vertexIndexBuffer;
        var vertexColorBuffer = craft.vertexColorBuffer;
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, vertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
        mvPopMatrix();
    }

    var rotationSpeeed = [5,7,9,8,11,15,14,9,13,12];
    var locationsX = [0, 0, -2, 3, 0, -5, 0, -7, 8, 0];
    var locationsY = [0, 1, 0, 0, 4, 0, -6, 0, 0, -9]
    function drawSphere(i){
        mvPushMatrix();
        mat4.rotate(mvMatrix, degToRad(rAngle/rotationSpeeed[i]), [0,0,1]);
        mat4.translate(mvMatrix, [locationsX[i],locationsY[i], 0.0]);
        var planet = planets[i];
        var vertexPositionBuffer = planet.vertexPositionBuffer;
        var vertexIndexBuffer = planet.vertexIndexBuffer;
        var vertexColorBuffer = planet.vertexColorBuffer;
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, vertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.LINES, vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
        mvPopMatrix();

        //if(i==3){
        //    $('#earthPositionText').text("spaceDefender:~$ Earth Position x = "+degToRad(rAngle)+", y = "+degToRad(rAngle));
        //}
    }

    function drawCircle(i) {
    	var orbit = orbits[i];
        var vertexPositionBuffer = orbit.vertexPositionBuffer;
        var vertexColorBuffer = orbit.vertexColorBuffer;
        mvPushMatrix();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, vertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

        setMatrixUniforms();
        gl.drawArrays(gl.LINE_STRIP, 0, vertexPositionBuffer.numItems);
        mvPopMatrix();
    }

    function drawStars(){
        mvPushMatrix();
        gl.bindBuffer(gl.ARRAY_BUFFER, starPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, starPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, starColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, starColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

        setMatrixUniforms();
        gl.drawArrays(gl.POINTS, 0, starPositionBuffer.numItems);
        mvPopMatrix();
    }

    function drawScene() {
        gl.viewport(0, 0, canvas.width, canvas.height);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        var aspect = canvas.width/canvas.height;
        mat4.perspective(50, aspect, 0.1, 100.0, pMatrix);

        mat4.identity(mvMatrix);

        mat4.translate(mvMatrix, [0.0, 0.0, zoom]);
        mat4.multiply(mvMatrix, moonRotationMatrix);
        
        for(var i=0; i<10; i++){
            drawSphere(i);
        }

        for(var i=0; i<9; i++){
            drawCircle(i);
        }

        for(var i=0; i<spaceCrafts.length; i++){
            drawCraft(i);
        }

        //DRAW STARS!!! ------------------------------------
        drawStars();

        mvPushMatrix();
        mat4.rotate(mvMatrix, degToRad(90), [1,0,0]);
        drawStars();
        mvPopMatrix();

        mvPushMatrix();
        mat4.translate(mvMatrix, [0,-60,0]);
        mat4.rotate(mvMatrix, degToRad(90), [1,0,0]);
        drawStars();
        mvPopMatrix();

        mvPushMatrix();
        mat4.rotate(mvMatrix, degToRad(90), [0,1,0]);
        drawStars();
        mvPopMatrix();

        mvPushMatrix();
        mat4.translate(mvMatrix, [60,0,0]);
        mat4.rotate(mvMatrix, degToRad(90), [0,1,0]);
        drawStars();
        mvPopMatrix();

        mvPushMatrix();
        mat4.translate(mvMatrix, [0,0,60]);
        drawStars();
        mvPopMatrix();
        //DRAW STARS END ===================================
    }

    var lastTime = 0;

    function animate() {
        var timeNow = new Date().getTime();
        if (lastTime != 0) {
            var elapsed = timeNow - lastTime;

            rAngle += .01 * elapsed;
        }
        lastTime = timeNow;
    }

    function tick() {
        requestAnimFrame(tick);
        handleKeys();
        drawScene();
        animate();
    }

    var secondFingerX = null;
    var secondFingerY = null;
    function webGLStart() {
        canvas = document.getElementById("canvas");
        initGL();
        resizeCanvas();
        initShaders();
        initBuffers();

        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.enable(gl.DEPTH_TEST);

        document.onkeydown = handleKeyDown;
        document.onkeyup = handleKeyUp;

        canvas.onmousedown = handleMouseDown;
        document.onmouseup = handleMouseUp;
        document.onmousemove = handleMouseMove;

        document.ondblclick = handleDoubleClick;

        canvas.addEventListener("touchstart", function(e){
        	e.preventDefault(); 
        	mouseDown = true;
	        lastMouseX = e.changedTouches[0].clientX;
    	    lastMouseY = e.changedTouches[0].clientY;
    	    if(e.changedTouches.length > 1){
    	    	secondFingerX = e.changedTouches[1].clientX;
    	    	secondFingerY = e.changedTouches[1].clientY;
    	    }
        }, false);
		canvas.addEventListener("touchend", function(e){
			mouseDown = false;
		}, false);
		canvas.addEventListener("touchmove", function(e){
			if (!mouseDown) {
            	return;
	        }
	        if(e.changedTouches.length > 1){
	        	var firstX = e.changedTouches[0].clientX;
		        var firstY = e.changedTouches[0].clientY;
		        var secondX = e.changedTouches[1].clientX;
		        var secondY = e.changedTouches[1].clientY;

		        var oldDistance = Math.sqrt(((secondFingerX-lastMouseX)*(secondFingerX-lastMouseX))+((secondFingerY-lastMouseY)*(secondFingerY-lastMouseY)));
		        var newDistance = Math.sqrt(((secondX-firstX)*(secondX-firstX))+((secondY-firstY)*(secondY-firstY)));

		        if(oldDistance > newDistance){
		        	zoom -= 0.2;
		            if(zoom<-25){
		                zoom = -25;
		            }
		        }
		        if(newDistance > oldDistance){
		        	zoom += 0.2;
		            if(zoom>25){
		                zoom = 25;
		            }
		        }
	        	
	            lastMouseX = firstX;
		        lastMouseY = firstY;
		        secondFingerX = secondX;
		        secondFingerY = secondY;
	        }else{
	        	var newX = e.changedTouches[0].clientX;
		        var newY = e.changedTouches[0].clientY;

		        var deltaX = newX - lastMouseX
		        var newRotationMatrix = mat4.create();
		        mat4.identity(newRotationMatrix);
		        mat4.rotate(newRotationMatrix, degToRad(deltaX / 10), [0, 1, 0]);

		        var deltaY = newY - lastMouseY;
		        mat4.rotate(newRotationMatrix, degToRad(deltaY / 10), [1, 0, 0]);

		        mat4.multiply(newRotationMatrix, moonRotationMatrix, moonRotationMatrix);

		        lastMouseX = newX;
		        lastMouseY = newY;
	    	}
		}, false);

        tick();

        window.addEventListener('resize', resizeCanvas);

        $("#drawerButton").click(function(){
        	$("#drawer").toggle();
        });
    }


    //Objects ---------------------------------------------
    function sphere(vertexPositionBuffer, vertexIndexBuffer, vertexColorBuffer){
    	this.vertexPositionBuffer = vertexPositionBuffer;
        this.vertexIndexBuffer = vertexIndexBuffer;
        this.vertexColorBuffer = vertexColorBuffer;
    }

    function circle(vertexPositionBuffer, vertexColorBuffer){
    	this.vertexPositionBuffer = vertexPositionBuffer;
        this.vertexColorBuffer = vertexColorBuffer;
    }

    function craft(posx, posy, posz, vertexPositionBuffer, vertexIndexBuffer, vertexColorBuffer){
        this.posx = posx;
        this.posy = posy;
        this.posz = posz;
        this.vertexPositionBuffer = vertexPositionBuffer;
        this.vertexIndexBuffer = vertexIndexBuffer;
        this.vertexColorBuffer = vertexColorBuffer;
    }

    function alien(posx, posy, posz, vertexPositionBuffer, vertexIndexBuffer, vertexColorBuffer){
        this.posx = posx;
        this.posy = posy;
        this.posz = posz;
        this.vertexPositionBuffer = vertexPositionBuffer;
        this.vertexIndexBuffer = vertexIndexBuffer;
        this.vertexColorBuffer = vertexColorBuffer;
    }

    function bullet(posx, posy, posz, vertexPositionBuffer, vertexIndexBuffer, vertexColorBuffer){
        this.posx = posx;
        this.posy = posy;
        this.posz = posz;
        this.vertexPositionBuffer = vertexPositionBuffer;
        this.vertexIndexBuffer = vertexIndexBuffer;
        this.vertexColorBuffer = vertexColorBuffer;
    }
    //End of Objects=======================================

</script>

<style>
    body, html { 
    	width: 100%;
        height: 100%;
        border: 0px;
        padding: 0px;
    	margin: 0px;
    }

    #canvas {
        width: 100%;
        height: 100%;
    }
      
    #container {
    	width: 100%;
    	height: 100%;
    	position: relative;
	}

	#navi, 
	#drawer,
	#drawerButton {
	    position: absolute;
	    top: 0;
	    left: 0;
	}

	#navi {
		width: 100%;
	    height: 100%;
	}

	#drawer {
		background-color:#222222;
		opacity:0.8;
	    filter:alpha(opacity=80);
		width: 250px;
	    height: 100%;
	    z-index: 10;
        color: #00FF00;
        -moz-user-select: none; 
        -webkit-user-select: none; 
        -ms-user-select:none; 
        user-select:none;
	}

	#drawerButton {
        background-color: #444444;
        color: #00FF00;
        padding: 10px;
		z-index: 10;
		-moz-user-select: none; 
		-webkit-user-select: none; 
		-ms-user-select:none; 
		user-select:none;
	}

    p {
        padding-left: 10px;
        padding-right: 10px;
    }
</style>

</head>
    <body onload="webGLStart();">
    	<div id="container">
		    <div id="navi"><canvas id="canvas"></canvas></div>
		    <div id="drawer" style="display: none;">
                <br><br>
		    	<p id="score">spaceDefender:~$ Score: 99999</p>
                <p>spaceDefender:~$ asdfasdfasdf asdf asdf asdfasdf asdf</p>
                <p>spaceDefender:~$ asdf asdf asdf</p>
                <p>spaceDefender:~$ asdfasdf asdfasdf asdf asdfasdf</p>
                <p>spaceDefender:~$ asdf asdf asdf asdfasdfasdfasdf asdf asdf</p>
                <p id="earthPositionText">spaceDefender:~$ Earth Position x = 0, y = 0</p>
		    </div>
		    <button id="drawerButton" >Controls</button>
		</div>
    </body>
</html>