<html>

<head>
<title>SolarSystem</title>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">

<script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>
<script type="text/javascript" src="webgl-utils.js"></script>
<script src="http://www.html5canvastutorials.com/libraries/three.min.js"></script>

<script id="shader-fs" type="x-shader/x-fragment">
    precision mediump float;

    varying vec4 vColor;

    void main(void) {
        gl_FragColor = vColor;
    }
</script>

<script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPosition;
    attribute vec4 aVertexColor;

    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;

    varying vec4 vColor;

    void main(void) {
        gl_PointSize = 1.;
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);

        vColor = aVertexColor;
    }
</script>

<script type="text/javascript">

    var gl;
    var canvas;
    function initGL() {
        try {
            gl = canvas.getContext("experimental-webgl");
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }

    function resizeCanvas() {
        if (canvas.width != canvas.clientWidth || canvas.height != canvas.clientHeight) {

            canvas.width = canvas.clientWidth;
            canvas.height = canvas.clientHeight;
        }
    }

    function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }

        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }

        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }

        gl.shaderSource(shader, str);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }

        return shader;
    }


    var shaderProgram;

    function initShaders() {
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");

        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }

        gl.useProgram(shaderProgram);

        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

        shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
        gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);

        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
    }


    var mvMatrix = mat4.create();
    var mvMatrixStack = [];
    var pMatrix = mat4.create();

    function mvPushMatrix() {
        var copy = mat4.create();
        mat4.set(mvMatrix, copy);
        mvMatrixStack.push(copy);
    }

    function mvPopMatrix() {
        if (mvMatrixStack.length == 0) {
            throw "Invalid popMatrix!";
        }
        mvMatrix = mvMatrixStack.pop();
    }

    function setMatrixUniforms() {
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
    }

    function degToRad(degrees) {
        return degrees * Math.PI / 180;
    }

    var currentlyPressedKeys = {};

    function handleKeyDown(event) {
        currentlyPressedKeys[event.keyCode] = true;
    }


    function handleKeyUp(event) {
        currentlyPressedKeys[event.keyCode] = false;
    }

    var zoom = -25;
    var tilt = 90;
    var spin = 0;

    function handleKeys() {
        if (currentlyPressedKeys[38]) {
            // Up cursor key
            zoom += 0.1;
            if(zoom>25){
                zoom = 25;
            }
        }
        if (currentlyPressedKeys[40]) {
            // Down cursor key
            zoom -= 0.1;
            if(zoom<-25){
                zoom = -25;
            }
        }
    }

    var mouseDown = false;
    var lastMouseX = null;
    var lastMouseY = null;

    var moonRotationMatrix = mat4.create();
    mat4.identity(moonRotationMatrix);

    function handleMouseDown(event) {
        mouseDown = true;
        lastMouseX = event.clientX;
        lastMouseY = event.clientY;
    }


    function handleMouseUp(event) {
        mouseDown = false;
    }


    function handleMouseMove(event) {
        if (!mouseDown) {
            return;
        }
        var newX = event.clientX;
        var newY = event.clientY;

        var deltaX = newX - lastMouseX
        var newRotationMatrix = mat4.create();
        mat4.identity(newRotationMatrix);
        mat4.rotate(newRotationMatrix, degToRad(deltaX / 10), [0, 1, 0]);

        var deltaY = newY - lastMouseY;
        mat4.rotate(newRotationMatrix, degToRad(deltaY / 10), [1, 0, 0]);

        mat4.multiply(newRotationMatrix, moonRotationMatrix, moonRotationMatrix);

        lastMouseX = newX
        lastMouseY = newY;
    }

    var spherePosition = [];
    var sphereIndex = [];
    var sphereColor = [];
    var circles = [];
    var sizes =[.5, .05, .1, .09, .08, .3, .2, .1, .1, .05];
    var c1 = [1, .7, .3, 0, 1, 1, .5, 1, 0, 0];
    var c2 = [1, .2, .5, .7, 0, 0.64705882352, 0, 0, 0, 1];
    var c3 = [0, 0, .3, 1, 0, 0, .8, 1, 1, 1];
    
    function initSphere(i) {
        var vertexPositionBuffer;
        var vertexIndexBuffer;
        var vertexColorBuffer;
        
        var latitudeBands = 20;
        var longitudeBands = 20;
        var radius = sizes[i];

        var vertexPositionData = [];
        var colors = [];

        for (var latNumber=0; latNumber <= latitudeBands; latNumber++) {
            var theta = latNumber * Math.PI / latitudeBands;
            var sinTheta = Math.sin(theta);
            var cosTheta = Math.cos(theta);

            for (var longNumber=0; longNumber <= longitudeBands; longNumber++) {
                var phi = longNumber * 2 * Math.PI / longitudeBands;
                var sinPhi = Math.sin(phi);
                var cosPhi = Math.cos(phi);

                var x = cosPhi * sinTheta;
                var y = cosTheta;
                var z = sinPhi * sinTheta;
                var u = 1 - (longNumber / longitudeBands);
                var v = 1 - (latNumber / latitudeBands);

                vertexPositionData.push(radius * x);
                vertexPositionData.push(radius * y);
                vertexPositionData.push(radius * z);

                colors.push(c1[i]);
                colors.push(c2[i]);
                colors.push(c3[i]);
                colors.push(1);
            }
        }

        var indexData = [];
        for (var latNumber=0; latNumber < latitudeBands; latNumber++) {
            for (var longNumber=0; longNumber < longitudeBands; longNumber++) {
                var first = (latNumber * (longitudeBands + 1)) + longNumber;
                var second = first + longitudeBands + 1;
                indexData.push(first);
                indexData.push(second);
                indexData.push(first + 1);

                indexData.push(second);
                indexData.push(second + 1);
                indexData.push(first + 1);
            }
        }

        vertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), gl.STATIC_DRAW);
        vertexPositionBuffer.itemSize = 3;
        vertexPositionBuffer.numItems = vertexPositionData.length / 3;

        vertexColorBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
        vertexColorBuffer.itemSize = 4;
        vertexColorBuffer.numItems = colors.length / 4;

        vertexIndexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STATIC_DRAW);
        vertexIndexBuffer.itemSize = 1;
        vertexIndexBuffer.numItems = indexData.length;

        spherePosition.push(vertexPositionBuffer);
        sphereIndex.push(vertexIndexBuffer);
        sphereColor.push(vertexColorBuffer);
    }

    function initCircle(radius) {
        var circleBuffer;
        var positionData = [];
        var numSegments = 100;
        for(var i=0; i<numSegments; i++){
            var theta = 2.0 * 3.1415926 * i / numSegments;
            var x = radius * Math.cos(theta);
            var z = radius * Math.sin(theta);
            var y = 0;

            positionData.push(x);
            positionData.push(y);
            positionData.push(z);
        }
        
        circleBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, circleBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positionData), gl.STATIC_DRAW);
        circleBuffer.itemSize = 3;
        circleBuffer.numItems = positionData.length/3;


        circles.push(circleBuffer);
    }

    var starPositionBuffer;
    var starColorBuffer;
    function initStars() {
        starPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, starPositionBuffer);
        var vertices = [];
        var colors = [];
        for(var i=0; i<400; i++){
            vertices.push((Math.random()*60)-30);
            vertices.push((Math.random()*60)-30);
            vertices.push(-30);
            colors.push(.3);
            colors.push(.3);
            colors.push(.3);
            colors.push(1);
        }
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        starPositionBuffer.itemSize = 3;
        starPositionBuffer.numItems = vertices.length/3;

        starColorBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, starColorBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
        starColorBuffer.itemSize = 4;
        starColorBuffer.numItems = colors.length / 4;
    }

    var circleColorBuffer;
    function initBuffers() {
        var radiuses =[1, 2, 3, 4, 5, 6, 7, 8, 9];
        for(var i=0; i<9; i++){
            initCircle(radiuses[i]);
        }

        for(var i=0; i<10; i++){
            initSphere(i);
        }

        var circleColors = [];
        var numSegments = 100;
        for(var i=0; i<numSegments; i++){
            circleColors.push(.08);
            circleColors.push(.08);
            circleColors.push(.08);
            circleColors.push(1);
        }

        circleColorBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, circleColorBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(circleColors), gl.STATIC_DRAW);
        circleColorBuffer.itemSize = 4;
        circleColorBuffer.numItems = circleColors.length / 4;

        initStars();
    }

    function degToRad(degrees) {
        return degrees * Math.PI / 180;
    }

    var rS = 0;
    var rT = -2;
    var rZ = 0;
    var rAngle = 0;

    var rotationSpeeed = [1,2,4,3,6,10,9,5,8,7];

    var locations =[0, -1, -2, -3, -4, -5, -6, -7, -8, -9];
    function drawSphere(i){
        mvPushMatrix();
        mat4.rotate(mvMatrix, degToRad(rAngle/rotationSpeeed[i]), [0,1,0]);
        mat4.translate(mvMatrix, [locations[i], 0.0, 0.0]);
        var vertexPositionBuffer = spherePosition[i];
        var vertexIndexBuffer = sphereIndex[i];
        var vertexColorBuffer = sphereColor[i];
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, vertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.LINES, vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
        mvPopMatrix();
    }

    function drawCircle(i) {  
        var circleBuffer = circles[i];
        mvPushMatrix();
        gl.bindBuffer(gl.ARRAY_BUFFER, circleBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, circleBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, circleColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, circleColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

        setMatrixUniforms();
        gl.drawArrays(gl.LINE_STRIP, 0, circleBuffer.numItems);
        mvPopMatrix();
    }

    function drawStars(){
        mvPushMatrix();
        gl.bindBuffer(gl.ARRAY_BUFFER, starPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, starPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, starColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, starColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

        setMatrixUniforms();
        gl.drawArrays(gl.POINTS, 0, starPositionBuffer.numItems);
        mvPopMatrix();
    }

    function drawScene() {
        gl.viewport(0, 0, canvas.width, canvas.height);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        var aspect = canvas.width/canvas.height;
        mat4.perspective(50, aspect, 0.1, 100.0, pMatrix);

        mat4.identity(mvMatrix);

        mat4.translate(mvMatrix, [0.0, 0.0, zoom]);
        mat4.multiply(mvMatrix, moonRotationMatrix);
        
        for(var i=0; i<10; i++){
            drawSphere(i);
        }

        for(var i=0; i<9; i++){
            drawCircle(i);
        }

        drawStars();

        mvPushMatrix();
        mat4.rotate(mvMatrix, degToRad(90), [1,0,0]);
        drawStars();
        mvPopMatrix();

        mvPushMatrix();
        mat4.translate(mvMatrix, [0,-60,0]);
        mat4.rotate(mvMatrix, degToRad(90), [1,0,0]);
        drawStars();
        mvPopMatrix();

        mvPushMatrix();
        mat4.rotate(mvMatrix, degToRad(90), [0,1,0]);
        drawStars();
        mvPopMatrix();

        mvPushMatrix();
        mat4.translate(mvMatrix, [60,0,0]);
        mat4.rotate(mvMatrix, degToRad(90), [0,1,0]);
        drawStars();
        mvPopMatrix();

        mvPushMatrix();
        mat4.translate(mvMatrix, [0,0,60]);
        drawStars();
        mvPopMatrix();
    }

    var lastTime = 0;
    var speed = .1;
    var speed2 = .1;

    function animate() {
        var timeNow = new Date().getTime();
        if (lastTime != 0) {
            var elapsed = timeNow - lastTime;

            rS += (90 * elapsed) / 1000.0;
            rAngle += .05 * elapsed;
        }
        lastTime = timeNow;

        rT += speed;

        if(rT > 2){
            speed = -speed;
        }

        if(rT < -2){
            speed = -speed;
        }

        rZ += speed2;
        if(rZ > 2){
            speed2 = -speed2;
        }
        if(rZ < -2){
            speed2 = -speed2;
        }
    }

    function tick() {
        requestAnimFrame(tick);
        handleKeys();
        drawScene();
        animate();
    }

    function webGLStart() {
        canvas = document.getElementById("canvas");
        initGL();
        resizeCanvas();
        initShaders();
        initBuffers();

        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.enable(gl.DEPTH_TEST);

        document.onkeydown = handleKeyDown;
        document.onkeyup = handleKeyUp;

        canvas.onmousedown = handleMouseDown;
        document.onmouseup = handleMouseUp;
        document.onmousemove = handleMouseMove;

        tick();

        window.addEventListener('resize', resizeCanvas);
    }


</script>

<style>
      body, html { 
        width: 100%;
        height: 100%;
        border: 0px;
        padding: 0px;
        margin: 0px;
      }
      #canvas {
        width: 100%;
        height: 100%;
      }
</style>

</head>
    <body onload="webGLStart();">
        <canvas id="canvas"></canvas>
    </body>
</html>